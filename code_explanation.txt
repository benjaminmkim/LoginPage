The front-end of the application is written in html using EJS files. It uses EJS files so that JS can be injected into the HTML. This is used to display the flash messages and the user's first and last name. 

Starting with the app.js file, after initializing all of the dependencies we need, we start by setting up mongoose to connect to the MongoDB server. The server ID is pulled in from an environment variable set in the .env file. After, we set express to use the EJS layout. We then initialize the express session. Then, we set up flash for the error and success messages. Finally, we set the '/' and '/users' routes. '/' routes to routes/index.js and '/users' routes to routes/users.js. 

The ./views directory contains all of the .ejs files. This includes the files for the register, login, and dashboard pages. There is also a layout.ejs file that sets the title of the tab. The messages.ejs file is called in both the register and login page to show any error or success messages.

The ./models directory contains 'user.js', which specifies the mongoose schema for a user. This schema contains the first name, last name, email, and password. It also has a date field that pulls the current date and time.

The ./routes directory contains 2 files: 'index.js' and 'users.js'. The 'index.js' file is what the '/' redirects to when the page is first opened up. It contains 2 routes. If the url is '/', it will route to the login page. If the url is '/dashboard', it will route to the dashboard page only if the user is logged in. This is checked in the ensureLoggedIn() function created in the ./config/auth.js file. This function uses passport's '.isAuthenticated()' function to check if the user is logged in. If so, the dashboard page will show with the user's first and last name. If not, it will redirect to the login page.

The 'users.js' file contains most of the work. The first two routes are the gets for the login page and the register page. They both use express's render function to display the .ejs files. The next route (line 19) is for when the register page is submitted. This first takes in all of the inputted information into 5 variables: first_name, last_name, email, password, and password2. Then, it checks to see if any of the variables are empty. If so, it pushes an error that says all of the fields need to be filled in. Then it checks to make sure both passwords are the same. If not, it pushes an error stating that they are different. Then it checks to make sure that the password is more than 6 characters long and that it also contains a special character. Finally, if there were any errors, it re-renders the page with the info filled out along with the errors. This way, if someone makes a mistake, they don't need to type in all of the information again. If there were no errors, it checks to see if the email is already registered by trying to find it in the DB. If it isn't registered, it creates a new User with the first name, last name, email, and password filled out. Then it takes the password and hashes it with a salt using the bcrypt's hash function. The number of saltRounds is set to 10, but this can be increased for added security at the cost of longer processing times. It then sets the password to this new hashed password and saves the data to the database using mongoose. Then it redirects to the login page with the success message stating the user is registered. The final routes are for the login page submission and also the logout button. For the login page, it uses passport's authenticate function to check if the email and password match any in the DB. If so, then it redirects to the dashboard page. If not, it will redirect back to the login page with an error message. The logout button is displayed on the dashboard. When clicked, it logs the user out using passport's .logout() function and then redirects to the login screen with a success flash message.